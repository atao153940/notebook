

信息来源：书本"ROS机器人开发实践"的笔记


【1】.slam数据类型
【2】.gmapping功能包
【3】.gmapping，gazebo中仿真（gmapping有关launch文件）
【4】.gmapping，gazebo中仿真（gazebo环境有关launch文件）
【5】.gmapping，gazebo中仿真（运行使用）

【6】.gmapping，真实机器人
【7】.hector_slam功能包
【8】.hector_slam，在gazebo中仿真（hector_slam有关的launch文件）
【9】.hector_slam，运行使用
【10】.rgbdslam功能包
【11】.ORB_SLAM功能包







【1】.slam数据类型
	1.杂
	    关于slam：最早是由Smith、Self、Cheeseman等人在1988年提出；
	    关于slam功能包数据类型：在ROS中提供了多个SLAM和自主导航有关的功能包（属于二维激光雷达的slam），这些slam功能包使用的topic数据包括，slam算法发送给执行机构的控制指令（如geometry_msgs/Twist类型），二维激光雷达返回的数据（如sensor_msgs/LaserScan类型），编码器等里程计返回的数据（如nav_msgs/Odometry类型）；这里的slam数据类型，专门指代ROS中提供的slam功能包使用的数据类型，其他slam算法可以使用任意其他种类的数据；

	1.控制指令，数据类型
	    说明：控制指令使用"geometry_msgs/Twist"类型，查看数据类型定义可用，"rosmsg show geometry_msgs/Twist"
	    数据类型定义：
geometry_msgs/Vector3 linear
    float64 x
    float64 y
    float64 z

geometry_msgs/Vector3 angular
    float64 x
    float64 y
    float64 z

	    分析说明：linear变量指机器人在xyz轴上的线速度，单位是m/s；angular变量指机器人在xyz轴上的角速度，单位是rad/s；ROS中的导航功能包对差分、轮式机器人的效果好，且功能包以方形、圆形机器人为模板进行开发，对其他形状机器人可以正常使用，但效果可能不佳；



	2.激光雷达，数据类型
	    说明：激光雷达返回的信息使用"sensor_msgs/LaserScan"类型，查看数据类型定义可用，"rosmsg show sensor_msgs/LaserScan"

	    数据类型定义：
std_msgs/Header header
    uint32 seq
    time stamp
    string frame_id

float32 angle_min
float32 angle_max
float32 angle_increment
float32 time_increment
float32 scan_time
float32 range_min
float32 range_max
float32[] ranges
float32[] intensities

	    分析说明：（不详细，仅记录）
	        angle_min、angle_max：可检测范围的起始角度和终止角度；
	        angle_increment：采集到相邻数据帧之间的角度步长；（小疑问，没看懂？）
	        time_increment：采集到相邻数据帧之间的时间步长，当传感器处于相对运动状态时，可以进行补偿使用；（小疑问，好像是去除小车自身移动的影响，去掉速度*时间）
	        scan_time：采集一帧数据所需要的时间；
	        range_min、range_max：可以检测距离的最小值和最大值；
	        ranges：一帧深度数据的存储数组；



	3.补充，Kinect数据->二维激光雷达数据
	    说明：如果将Kinect用于二维激光雷达的slam算法，则也可以通过"depthimage_to_laserscan"功能包，将Kinect获得的三维点云，转换成二维激光雷达数据；原理是，选择其中点云中的一行即可（小疑问，上述功能包中是选择哪一行吗）；

	    "depthimage_to_laserscan"功能包使用举例（launch文件）

<node pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" name="depthimage_to_laserscan" output="screen">
    <remap from="image" to="/camera/depth/image_raw"/>
    <remap from="camera_info" to="/camera/depth/camera_info"/>
    <remap from="scan" to="/scan"/>
    <param name="output_frame_id" value="/camera_link"/>
</node>
	    小疑问，深度数据选择：Kinect发布的图像数据topic有3个，即"/camera/depth_registered/image_raw"、"/camera/ir/image_raw"、"/camera/rgb/image_raw"，这里意思是，选用depth的深度点云，没用ir相机的深度数据吗；
	   小疑问，输出topic："scan"映射为"/scan"，这个是处理好发布的二维激光雷达数据的topic吗，为何与输入信息的映射方式写法相同吗；



	4.里程计，数据类型
	    说明：编码器等里程计返回的信息，采用"nav_msgs/Odometry"类型；可以使用"rosmsg show nav_msgs/Odometry"查看数据类型定义；

	    1.数据类型定义：
std_msgs/Header header
    uint32 seq
    uint32 stamp
    string frame_id

string child_frame_id

geometry_msgs/PoseWithCovariance pose
    geometry_msgs/Pose pose
        geometry_msgs/Point position
	float64 x
	float64 y
	float64 z
        geometry_msgs/Quaternion orientation
	float64 x
	float64 y
	float64 z
	float64 w
    float64[36] covariance


geometry_msgs/TwistWithCovariance twist
    geometry_msgs/Twist twist
        geometry_msgs/Vector3 linear
	float64 x
	float64 y
	float64 z
        geometry_msgs/Vector3 angluar
	float64 x
	float64 y
	float64 z
    float64[36] covariance

	    2.分析说明
	        pose、twist变量：pose变量表示位置（xyz位置，xyzw四元数角度），twist变量表示运动信息（xyz速度，xyz角速度）；还各自包含用于校正误差的协方差矩阵，covariance；
	        协方差矩阵：covariance，在精度要求不高的场合，可以使用默认的协方差矩阵；在精度要求较高时，需要先对机器人建模，再通过仿真、实验等方法确定该矩阵的具体数值；










【2】.gmapping功能包
	1.杂
	    关于gmapping：gmapping功能包使用Rao-Blackwellized粒子滤波算法；gmapping功能包是基于openslam社区的开源slam算法，开源社区网址，http://openslam.org/gmapping.html；

	    安装步骤：sudo apt-get install ros-kinetic-gmapping
	        说明：在ROS的软件源中已经集成了gmapping功能包的二进制安装文件；


	2.gmapping功能包，有关topic，service
	    1.订阅的topic
	        名称，tf；类型，tf/Message；描述，用于激光雷达坐标系、基坐标系、里程计坐标系之间的变换；
		说明：小疑问，基坐标系等同IMU坐标系吗（好像没有用到IMU）；然后"激光雷达"->"基坐标系"，"里程计"->"基坐标系"之间的变换一般是固定不变的吗，还是意思即然用了tf消息，就是可以实时变化的；

	        名称，scan；类型，sensor_msgs/LaserScan；描述，激光雷达扫描数据；

	    2.发布的topic（不详细）
	        名称，map_metadata；类型，nav_msgs/MapMetaData；描述，发布地图的Meta数据；
	        名称，map；类型，nav_msgs/OccupancyGrid；描述，发布地图栅格数据；
	        名称，~entropy；类型，std_msgs/Float64；描述，发布机器人分布熵的估计；
		说明，小疑问，~entropy是私有名称吗，意思前缀是当前node的命名空间吗；


	    3.提供的Service
	        名称，dynamic_map；类型，nav_msgs/GetMap；描述，获取地图数据；



	3.gmapping功能包，可配置的参数（不详细）
	    1.名称，~throttle_scan；类型，int；默认值，1；描述，每接收到该数量帧的激光数据后，只是处理其中一帧数据；默认每接收到一帧数据就处理一次；
	        说明：好像是，意思就处理1/~throttle_scan的数据，其他的都丢弃吗；

	    2.名称，~base_frame；类型，string；默认值，"base_link"；描述，机器人基坐标系；
	        小疑问，基坐标系等同于IMU坐标系吗，这里好像没有用到IMU吗；


	    3.名称，~map_frame；类型，string；默认值，"map"；描述，地图坐标系；

	    4.名称，~odom_frame；类型，string；默认值，"odom"；描述，里程计坐标系；


	    5.名称，~map_update_interval；类型，float；默认值，5.0；描述，地图更新频率，该值越低，计算负载越大；
	        小疑问，是否应该是更新频率越高，计算负载才越大吗；

	    6.名称，~maxUrange；类型，float；默认值，80.0；描述，激光可探测的最大范围；

	    7.名称，~sigma；类型，float；默认值，0.05；描述，端点匹配的标准差；

	    8.名称，~kernelSize；类型，int；默认值，1；描述，在对应的内核中查找（没看懂？）

	    9.名称，~lstep；类型，float；默认值，0.05；描述，平移过程中优化步长；

	    10.名称，~astep；类型，float；默认值，0.05；描述，旋转过程中优化步长；

	    11.名称，~iterations；类型，int；默认值，5；描述，扫描匹配的迭代次数；

	    12.名称，~lsigma；类型，float；默认值，0.075；描述，似然计算的激光标准差；

	    13.名称，~ogain；类型，float；默认值，3.0；描述，似然计算时用于平滑重采样效果；

	    14.名称，~lskip；类型，int；默认值，0；描述，每次扫描跳过的光束数；

	    15.名称，~minimumScore；类型，float；默认值，0.0；描述，扫描匹配结果的最低值；当使用有限范围（如5m）的激光雷达时，可以避免在大开放环境中跳跃姿势估计（没看懂？）

	    16.名称，~srr；类型，float；默认值，0.1；描述，平移函数（rho/rho），平移时的里程误差；

	    17.名称，~srt；类型，float；默认值，0.2；描述，旋转函数（rho/theta），平移时的里程误差；

	    18.名称，~str；类型，float；默认值，0.1；描述，平移函数（theta/rho），旋转时的里程误差；

	    19.名称，~stt；类型，float；默认值，0.2；描述，旋转函数（theta/theta），旋转时的里程误差；

	    20.名称，~linearUpdate；类型，float；默认值，1.0；描述，机器人每平移该距离后，处理一次激光扫描数据；

	    21.名称，~angularUpdate；类型，float；默认值，0.5；描述，机器人每旋转该弧度后，处理一次激光扫描数据；

	    22.名称，~temporalUpdate；类型，float；默认值，-1.0；描述，如果最新扫描处理的速度比更新的速度慢，则处理一次扫描；该值为负数时关闭基于时间的更新（没看懂？）

	    23.名称，~resampleThreshold；类型，float；默认值，0.5；描述，基于Neff的重采样阈值；

	    24.名称，~particle；类型，int；默认值，30；描述，滤波器中的粒子数量；

	    25.名称，~xmin，~ymin；类型，float，float；默认值，-100，-100；描述，地图x向、y向的初始最小尺寸；

	    26.名称，~xmax，~ymax；类型，float，float；默认值，100，100；描述，地图x向、y向的初始最大尺寸；

	    27.名称，~delta；类型，float；默认值，0.05；描述，地图分辨率；

	    28.名称，~llsamplerange；类型，float；默认值，0.01；描述，似然计算的平移采样距离；

	    29.名称，~llsamplestep；类型，float；默认值，0.01；描述，似然计算的平移采样步长；

	    30.名称，~lasamplerange；类型，float；默认值，0.005；描述，似然计算的角度采样距离；

	    31.名称，~lasamplestep；类型，float；默认值，0.005；描述，似然计算的角度采样步长；

	    32.名称，~transform_publish_period；类型，float；默认值，0.05；描述，TF发布的时间间隔；

	    33.名称，~occ_thresh；类型，float；默认值，0.25；描述，栅格地图占用率的阈值；

	    34.名称，~maxRange；类型，float；默认值，没有写？描述，传感器最大范围；



	3.gmapping功能包，tf消息
	    1.订阅的tf消息
	        scan frame -> base_link
		说明：激光雷达坐标系到基坐标系之间的变换；（小疑问，一般是固定数值吗）；（没看懂）一般由"robot_state_publisher"或"static_transform_publisher"发布（小疑问，"static_transform_publisher"好像是在tf中的一个工具，对于静态的两个坐标系之间的tf消息，可以用上述节点固定频率发布；好像是一个功能包中提供的工具；但"static_transform_publisher"节点发布，没看懂）

	        base_link -> odom
		说明：好像就是里程计（编码器）的输入数据；关于里程计数据，对于使用"libgazebo_ros_diff_drive.so"插件在gazebo中进行仿真的机器人，上述插件会发布"odom"这个topic，作为里程计信息；然后"libgazebo_ros_laser.so"插件会返回"/scan"这个激光雷达的topic；对于使用MRobot实际机器人的，在树莓派上会启动"mrobot_bringup"这个节点，功能就包括下发控制指令到单片机和发布"odom"这个topic；
		小疑问：无论对于gazebo中仿真的机器人，还是实际的MRobot机器人，好像都是发布的"odom"这个topic，不是以tf消息形式发布里程计数据吗；然后即使使用tf消息，是否统一形式，应该发布odom->base_link的tf消息；


	    2.发布的tf消息
	        map->odom
		说明：地图坐标系到机器人里程计坐标系的变换，估计机器人在地图中的位姿；
		小疑问：如果发布的机器人的姿态，那么不是应该发布base_link->map的tf消息吗；



	4.gmapping输入输出信息总结
	    1.输入信息
	        1.激光雷达坐标系到基坐标系信息：通过tf消息，scan frame->base_link；好像一般是固定值；
	        2.里程计的输入信息：通过tf消息，base_link->odom；	
	        3.激光雷达输入信息：通过topic消息，/scan；
	        小疑问，没用到IMU的信息吗；

	    2.输出信息
	        1.地图信息：通过topic消息；map_metadata，map
	        2.自身位姿：通过tf消息，map->odom；









【3】.gmapping，gazebo中仿真（gmapping有关launch文件）
	说明：gmapping在gazebo中需要启动多个launch文件，下面逐个介绍；下面介绍的是gmapping节点和rviz节点；

	1.launch文件，gmapping节点
	    说明：文件名，mrobot_navigation/launch/gmapping.launch

	    文件内容：
<launch>
    <arg name="scan_topic" default="scan"/>

    <node pkg="gmapping" type="slam_gmapping" name="slam_gmapping" output="screen" clear_params="true">
        <param name="odom_frame" value="odom"/>
        <param name="scan" value="$(arg scan_topic)"/>

        <param name="map_update_interval" value="5.0"/>
        <param name="maxRange" value="5.0"/>
        <param name="maxUrange" value="4.5"/>
        <param name="sigma" value="0.05"/>
        <param name="kernalSize" value="1"/>
        <param name="lstep" value="0.05"/>
        <param name="astep" value="0.05"/>
        <param name="iterations" value="5"/>
        <param name="lsigma" value="0.075"/>
        <param name="ogain" value="3.0"/>
        <param name="lskip" value="0"/>
        <param name="srr" value="0.01"/>
        <param name="srt" value="0.02"/>
        <param name="str" value="0.01"/>
        <param name="stt" value="0.02"/>
        <param name="linearUpdate" value="0.5"/>
        <param name="angularUpdate" value="0.436"/>
        <param name="temporalUpdate" value="-1.0"/>
        <param name="resampleThreshold" value="0.5"/>
        <param name="particles" value="80"/>
        <param name="xmin" value="-1.0"/>
        <param name="ymin" value="-1.0"/>
        <param name="xmax" value="1.0"/>
        <param name="ymax" value="1.0"/>
        <param name="delta" value="0.05"/>
        <param name="llsamplerange" value="0.01"/>
        <param name="llsamplestep" value="0.01"/>
        <param name="lasamplerange" value="0.005"/>
        <param name="lasamplestep" value="0.005"/>
    </node>
</launch>

	    分析说明：启动"gmapping"节点；关于参数配置，大多数参数可以使用默认值，或者使用ROS中相似机器人的配置即可，有能力可以细调；需要修改的参数，"odom_frame"，里程计坐标系的设置；"scan"，激光雷达的数据的topic，gmapping节点中默认的订阅的topic名是"/scan"，如果实际机器人发布的不是，需要按上述使用<arg name ...>方式进行重映射为"scan"；
	    小疑问：gmapping节点输入的信息不是有3个，激光雷达的topic、里程计到基坐标系的tf消息、激光雷达坐标系到基坐标系的tf消息；为何上述缺少"激光雷达坐标系到基坐标系的tf消息"的配置；然后，里程计的输入信息不是采用了"里程计到基坐标系的tf消息"这种形式吗，为何上面配置的是"odom_frame"，或者这个就是tf消息的frame吗；
	    小疑问：关于scan这个参数，这里不就是设置实际的激光雷达topic是什么的地方吗，为何需要在外面使用<arg name..>把实际的激光雷达topic名映射成"scan"；



	2.launch文件，实际调用的gmapping
	    说明：文件名，"mrobot_navigation/launch/gmapping_demo.launch"

	    文件内容：
<launch>
    <include file="$(find mrobot_navigation)/launch/gmapping.launch"/>

    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find mrobot_navigation)/rviz/gmapping.rviz"/>
</launch>

	    说明：上述文件是实际调用的launch文件，包括了gmapping节点和rviz节点；










【4】.gmapping，gazebo中仿真（gazebo环境有关launch文件）
	1.杂
	    关于当前launch文件：gmapping在gazebo中需要启动多个launch文件，下面逐个介绍；下面介绍的是gazebo仿真环境有关的节点；该文件与前面的"使用rplidar的MRobot在gazebo中显示"的launch文件类似；
	    slam所需信息，真实机器人：即如果使用真实机器人MRobot，则该机器人上的树莓派上会运行"mrobot_bringup"节点，由该节点提供gmapping所需的，里程计tf消息、激光雷达的topic数据、激光雷达坐标系到基坐标系的tf消息；
	    slam所需信息，gazebo仿真：对于使用"libgazebo_ros_diff_drive.so"插件在gazebo中进行仿真的机器人，上述插件会发布"odom"这个topic，作为里程计信息；然后"libgazebo_ros_laser.so"插件会返回"/scan"这个激光雷达的topic；


	2.创建仿真环境（不详细）
	    说明：在Gazebo软件中，使用"Gazebo Building Editor"工具，可以画出所需环境的平面图；/创建完成后，点击Gazebo菜单栏中"保存"，命名为"cloister.world"，保存到"mrobot_gazebo/worlds"文件夹；


	3.gazebo仿真的launch文件
	    说明：文件名，"mrobot_gazebo/launch/mrobot_laser_nav_gazebo.launch"

<launch>

    <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find mrobot_gazebo)/urdf/mrobot_with_rplidar.urdf.xacro'"/>


    <!-- 定义gazebo仿真环境所需参数 -->
    <arg name="world_name" value="$(find mrobot_gazebo)/worlds/cloister.world"/>
    <arg name="debug" default="false"/>
    <arg name="gui" default="true"/>
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="headless" default="false"/>


    <!-- gazebo仿真环境 -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(arg world_name)"/>
        <arg name="debug" value="$(arg debug)"/>
        <arg name="gui" value="$(arg gui)"/>
        <arg name="paused" value="$(arg pausd)"/>
        <arg name="use_sim_time" value="$(use_sim_time)"/>
        <arg name="headless" value="$(headless)"/>
    </include>


    <!-- joint_state_publisher节点 -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>


    <!-- robot_state_publisher节点 -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen">
        <param name="publish_frequency" type="double" value="50.0"/>
    </node>


    <!-- gazebo中加载机器人模型 -->
    <node name="gazebo_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-urdf model mrobot -param robot_description"/>

</launch>

	    分析说明：此处gmapping功能包，在gazebo中仿真，使用的gazebo有关节点的launch文件内容与"使用rplidar的MRobot在gazebo显示"类似，但文件名不同；之前"使用rplidar的MRobot在gazebo显示"使用的launch文件是"mrobot_gazebo/launch/view_mrobot_rplidar_gazebo.launch"；此处使用的launch文件是"mrobot_gazebo/launch/mrobot_laser_nav_gazebo.launch"；两个文件中使用的机器人模型相同，都是"mrobot_gazebo/urdf/mrobot_with_rplidar.urdf.xacro"；


	4.运行使用
	    roslaunch mrobot_gazebo mrobot_laser_nav_gazebo.launch
	    roslaunch mrobot_teleop mrobot_teleop.launch









【5】.gmapping，gazebo中仿真（运行使用）
	1.运行使用，rplidar
	    roslaunch mrobot_gazebo mrobot_laser_nav_gazebo.launch
	    roslaunch mrobot_navigation gmapping_demo.launch
	    roslaunch mrobot_teleop mrobot_teleop.launch
	        说明，gmapping_demo：该launch文件启动节点包括，gmapping节点、rviz节点；
	        说明，mrobot_lasr_nav_gazebo：该launch文件启动的节点包括，"joint_state_publisher"、"robot_state_publisher"、"gazebo_spawner"，其他整个"empty_world.launch"中包括的文件；
	        说明，mrobot_teleop：该launch文件启动的节点功能，猜测是接收键盘输入，发布的vel_cmd这个topic上；
	        功能说明：使用键盘可以控制机器人在gazebo仿真器上移动；同时rviz界面上，会显示建立出的实时地图；


	2.保存地图
	    1.保存地图命令：rosrun map_server map_saver
	        说明：上述命令，好像是调用了"map_server"功能包中的节点，用于保存地图（小疑问，上述功能包哪里安装吗）；在当前目录下，会生成两个文件，map.pgm、map.yaml；其中，map.pgm是图片文件，使用常见的GIMP软件（没看懂？）可以打开；map.yaml是地图有关的说明信息，内容如下；

	    2.map.yaml文件内容：
image: map.pgm
resolution: 0.050000
origin: [-15.400000, -12.200000, 0.000000]
negate: 0
occupied_thresh: 0.65
free_thresh: 0.196
	     说明：内容不详细；



	3.运行使用，kinect相机
	    roslaunch mrobot_gazebo mrobot_kinect_nav_gazebo.launch
	    roslaunch mrobot_navigation gmapping_demo.launch
	    roslaunch mrobot_teleop mrobot_teleop.launch
	    rosrun map_server map_saver
	    说明：与使用rplidar相比，此处使用的gazebo有关的launch文件有不同，使用"mrobot_kinect_nav_gazebo.launch"；估计区别是，使用的机器人模型，换成了"mrobot_with_camera.urdf.xacro"；这样仿真模型可以发布odom、/camera/depth_registered/image_raw这两个topic；然后在上述launch文件中估计还有"depthimage_to_laser"节点，把kinect的深度图转换成二维激光雷达的数据格式；









【6】.gmapping，真实机器人
	1.杂
	    slam所需信息，真实机器人：即如果使用真实机器人MRobot，则该机器人上的树莓派上会运行"mrobot_bringup"节点，由该节点提供gmapping所需的，里程计tf消息、激光雷达的topic数据、激光雷达坐标系到基坐标系的tf消息；


	2.树莓派上运行的launch文件
	    说明：作用，提供里程计tf消息、激光雷达的topic数据、激光雷达坐标系到基坐标系的tf消息；作用类似gazebo仿真中，gazebo仿真有关的launch文件；文件名，"mrobot_bringup/launch/mrobot_with_laser.launch"

	    文件内容：
<launch>
    <arg name="urdf_file" default="$(find xacro)/xacro --inorder '$(find mrobot_description)/urdf/mrobot_with_rplidar.urdf.xacro'"/>
    <param name="robot_description" command="$(arg urdf_file)"/>


    <node pkg="mrobot_bringup" type="mrobot_bringup" name="mrobot_bringup" output="screen"/>

    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
        <param name="publish_frequency" type="double" value="5.0"/>
    </node>

    <node name="base2laser" pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 0 1 /base_link /laser 50"/>

    <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
        <remap from="robot_pose_ekf/odom_combined" to="odom_combined"/>
        <param name="freq" value="10.0"/>
        <param name="sensor_timeout" value="1.0"/>
        <param name="publish_tf" value="true"/>
        <param name="odom_used" value="true"/>
        <param name="imu_used" value="false"/>
        <param name="vo_used" value="false"/>
        <param name="output_frame" value="odom"/>
    </node>

    <include file="$(find mrobot_bringup)/launch/rplidar.launch"/>
</launch>

	    说明，"mrobot_bringup"：下发控制信息部分，订阅速度控制的topic，通过串口发送给单片机；上传数据部分，发布里程计的tf消息（slam所需的3个消息中，"里程计tf消息、激光雷达的topic数据、激光雷达坐标系到基坐标系的tf消息"，仅完成一个）
	    说明，rplidar.launch：上传数据部分，实现"激光雷达的topic"发布；
	    说明，static_transform_publisher：上传数据部分，实现"激光雷达坐标系到基坐标系的tf消息"发布；

	    说明，robot_pose_ekf：好像意思是，这个功能包的节点，可以实现订阅多个里程计的数据，使用EKF进行融合后，发布最终的里程计tf消息（意思这样精度高点吗）；而这里实际上，imu_used、vo_used都是false，所以好像仅仅转发了一下"mrobot_bringup"节点发布的里程计tf消息；小疑问，"output_frame"这个变量赋值为"odom"，意思发布的tf名是odom；但remap部分，意思是"mrobot_bringup"节点发布的tf消息名是"odom_combined"吗，然后上述"robot_pose_ekf"节点内部需要订阅的tf消息名是"robot_pose_ekf/odom_combined"吗；

	    说明："joint_state_publisher"、"robot_state_publisher"节点的作用未知；之前在仿真时使用的作用好像是，"joint_state_publisher"节点会订阅键盘输入的vel_cmd这个topic，然后转换成控制机器人的具体topic，被rviz等软件中，机器人模型的具体joint订阅；"robot_state_publisher"节点在仿真时的作用也未知；小疑问，此处"mrobot_bringup"节点意思也是订阅的vel_cmd这个topic吗，然后根据topic内容使用串口与单片机通信；

	    小疑问，包含机器人仿真文件的"robot_description"变量在哪里用到吗；


	3.运行使用
	    roslaunch mrobot_bringup mrobot_with_laser.launch
	    roslaunch mrobot_navigation gmapping_demo.launch
	    roslaunch mrobot_teleop mrobot_teleop.launch
	    rosrun map_server map_saver -f gmapping_map
	    说明，mrobot_with_laser文件：启动节点包括，
"mrobot_bringup"、"rplidar.launch"文件中的各节点、"static_transform_publisher"、"robot_pose_ekf"、"joint_state_publisher"、"robot_state_publisher"；可以发布gmapping所需的3个信息，"里程计tf消息、激光雷达的topic数据、激光雷达坐标系到基坐标系的tf消息"；同时订阅键盘输入的vel_cmd这个topic，控制小车运动；
	    说明，gmapping_demo文件：启动的节点包括，"gmapping_slam"，"rviz"；
	    说明，mrobot_teleop文件：接受键盘输入，发布vel_cmd这个topic；

	    小疑问，此处map_saver节点的后缀信息作用未知，"-f gmapping_map"；








【7】.hector_slam功能包
	1.杂
	    说明：hector_slam功能包使用高斯牛顿方法；然后输入信息只使用二维激光雷达数据，不使用里程计数据（编码器）；
	    关于自身位姿：hector_slam相比于gmapping，发布的topic除了"map_metadata"、"map"这两个地图有关的topic，还有"slam_out_pose"、"poseupdate"，这两个topic表示机器人当前的位姿；
	        小疑问：在gmapping中，输出地图信息是通过上述的"map_metadata"、"map"这两个topic发布；但是输出自身位姿，好像是通过tf消息，map->odom发布；此处输出自身姿态，就好像有了多种方式输出，通过topic消息，map、map_metadata，通过tf消息，map->odom；

	    安装：sudo apt-get install ros-kinect-hector-slam
	        说明：在ROS软件源中已经集成了hector_slam的二进制安装文件包，可以直接安装；


	2.hector_slam，topic和service
	    1.订阅的topic
	        名称，scan；类型，sensor_msgs/LaserScan；描述，激光雷达扫描的深度数据；
	        名称，syscommand；类型，std_msgs/String；描述，系统命令，如果字符串等于"reset"，则地图和机器人姿态重置为初始状态；

	    2.发布的topic
	        名称，map_metadata；类型，nav_msgs/MapMetaData；描述，发布地图Meta数据；
	        名称，map；类型，nav_msgs/OccupancyGrid；描述，发布地图栅格数据；
	        名称，slam_out_pose；类型，geometry_msgs/PoseStamped；描述，估计的机器人位姿（没有协方差）
	        名称，poseupdate；类型，geometry_msgs/PoseWithCovarianceStamped；描述，估计的机器人位姿（具有高斯估计的不确定性）

	    3.服务
	        名称，dynamic_map；类型，nav_msgs/GetMap；描述，获取地图数据；


	3.hector_slam，可设置的参数
	    1.名称，~base_frame；类型，string；默认值，"base_frame"；描述，机器人基坐标系；

	    2.名称，~map_frame；类型，string；默认值，"map"；描述，地图坐标系；

	    3.名称，~odom_frame；类型，string；默认值，"odom"；描述，里程计坐标系；
	        小疑问：hector_slam不是没有使用里程计数据吗；

	    4.名称，~map_resolution；类型，double；默认值，0.025；描述，单位米，地图分辨率，网格单元的边缘长度；

	    5.名称，~map_size；类型，int；默认值，1024；描述，地图大小；

	    6.名称，~map_start_x；类型，double；默认值，0.5；描述，/map的原点[0.0, 1.0]在x轴上相对于网格图的位置（没看懂？）

	    7.名称，~map_start_y；类型，double；默认值，0.5；描述，/map的原点[0.0, 1.0]在y轴上相对于网格图的位置（没看懂？）

	    8.名称，~map_update_distance_thresh；类型，double；默认值，0.4（m）；描述，地图更新的距离阈值，在地图上从上一次更新算起，直行距离达到该参数值后再次更新；

	    9.名称，~map_update_angle_thresh；类型，double；默认值，0.9（rad）；描述，地图更新的角度阈值，在地图上从上一次更新算起，旋转角度到达该参数值后再次更新；

	    10.名称，~map_pub_period；类型，double；默认值，2.0；描述，地图更新周期；

	    11.名称，~map_multi_res_levels；类型，int；默认值，3；描述，地图多分辨率网格级数；

	    12.名称，~update_factor_free；类型，double；默认值，0.4；描述，用于更新空闲单元的地图，范围[0.0, 1.0]；（没看懂？）

	    13.名称，~update_factor_occupied；类型，double；默认值，0.9；描述，用于更新被占用单元的地图，范围[0.0, 0.1]；（没看懂？）

	    14.名称，~laser_min_dist；类型，double；默认值，0.4（m）；描述，激光扫描点最小距离，小于该值的扫描点将被忽略；

	    15.名称，~laser_max_dist；类型，double；默认值，30.0（m）；描述，激光扫面点最大距离，大于该值的扫描点将被忽略；

	    16.名称，~laser_z_min_value；类型，double；默认值，-1.0（m）；描述，相对于激光雷达的最小高度，低于该值的扫描点将被忽略；

	    17.名称，~laser_z_max_value；类型，double；默认值，1.0（m）；描述，相对于激光雷达的最大高度，高于该值的扫描点将被忽略；

	    18.名称，~pub_map_odom_transform；类型，bool；默认值，true；描述，是否发布map与odom之间的坐标变换；

	    19.名称，~output_timing；类型，bool；默认值，false；描述，通过ROS_INFO处理每个激光扫描的输出时序信息；

	    20.名称，~scan_subscriber_queue_size；类型，int；默认值，5；扫描订阅者的队列大小；

	    21.名称，~pub_map_scanmatch_transfrom；类型，bool；默认值，true；描述，是否发布scanmatcher与map之间的坐标变换；

	    22.名称，~tf_map_scanmatch_transform_frame_name；类型，string；默认值，"scanmatcher_frame"；描述，scanmatcher的坐标系命名；（小疑问，激光雷达的坐标系吗）
	    小疑问：此处的参数好像不完整吗，因为在launch文件中，还设置了"scan_topic"，这里没有；另外，需要发布订阅tf消息，好像没有参数设置tf消息的名称吗；



	4.hector_slam，tf变换
	    1.订阅的tf消息：
	        名称，scan frame->base_link；描述，激光雷达坐标系与基坐标系之间的变换；一般由robot_state_publisher或static_transform_publisher发布；

	    2.发布的tf消息：
	        名称，map->odom；描述，地图坐标系与机器人里程计坐标系之间的变换；用于估计机器人在地图中的位姿；
	        小疑问：因为hector_slam没有使用里程计信息，所以是否应该是map->base_link；


	5.输入输出信息总结
	    1.输入的信息
	        1.激光雷达扫描数据：使用topic消息，/scan；
	        2.激光雷达坐标系到基坐标系变换：使用tf消息，scan frame->base_link；

	    2.输出的信息
	        1.地图信息：通过topic消息；"map"、"map_metadata"
	        2.机器人自身姿态：通过topic消息有，"slam_out_pose"、"poseupdate"；通过tf消息有，map->odom；










【8】.hector_slam，在gazebo中仿真（hector_slam有关的launch文件）
	1.hector.launch
	    说明：文件名，mrobot_navigation/launch/hector.launch

<launch>
    <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" output="screen">
        <!-- Frame name -->
        <param name="pub_map_odom_transform" value="true"/>
        <param name="map_frame" value="map"/>
        <param name="base_frame" value="base_footprint"/>
        <param name="odom_frame" value="odom"/>

        <!-- TF use -->
        <param name="use_tf_scan_transformation" value="true"/>
        <param name="use_tf_pose_start_estimate" value="false"/>

        <!-- Map size/start point -->
        <param name="map_resolution" value="0.05"/>
        <param name="map_size" value="2048"/>
        <param name="map_start_x" value="0.5"/>
        <param name="map_start_y" value="0.5"/>
        <param name="laser_z_min_value" value="-1.0"/>
        <param name="laser_z_max_value" value="1.0"/>
        <param name="map_multi_res_levels" value="2"/>
        <param name="map_pub_period" value="2"/>
        <param name="laser_min_dist" value="0.4"/>
        <param name="laser_max_dist" value="5.5"/>
        <param name="output_timing" value="false"/>
        <param name="pub_map_scanmatch_transform" value="true"/>

        <!-- Map update parameters -->
        <param name="update_factor_free" value="0.4"/>
        <param name="update_factor_occupied" value="0.7"/>
        <param name="map_update_distance_thresh" value="0.2"/>
        <param name="map_update_angle_thresh" value="0.06"/>

        <!-- Advertising config -->
        <param name="advertise_map_service" value="true"/>
        <param name="scan_subscriber_queue_size" value="5"/>
        <param name="scan_topic" value="scan"/>
    </node>
</launch>


	2.hector_demo.launch
	    说明：文件名，"mrobot_navigation/launch/hector_demo.launch"

<launch>
    <include file="$(find mrobot_navigation)/launch/hector.launch"/>

    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find mrobot_navigation)/rviz/gmapping.rviz"/>
</launch>

	    说明：实际调用的launch文件是上述"hector_demo.launch"，该文件中包含了前面的"hector.launch"；共启动2个节点，分别是，"hector_mapping"、"rviz"；










【9】.hector_slam，运行使用
	1.在gazebo中仿真
	    roslaunch mrobot_gazebo mrobot_laser_nav_gazebo.launch
	    roslaunch mrobot_navigation hector_demo.launch
	    roslaunch mrobot_teleop mrobot_teleop.launch
	    说明，运行特点：与gmapping相比，hector_slam没有使用odom信息，只使用了激光雷达数据/scan；所以当机器人运动速度较快时，容易出现打滑；
	    说明，mrobot_lasr_nav_gazebo：该launch文件启动的节点包括，"joint_state_publisher"、"robot_state_publisher"、"gazebo_spawner"，其他整个"empty_world.launch"中包括的文件；可以发布gmapping所需的3个信息，"里程计tf消息、激光雷达的topic数据、激光雷达坐标系到基坐标系的tf消息"；同时订阅键盘输入的vel_cmd这个topic，控制小车运动；
	    说明，hector_demo.launch：该launch文件启动的节点包括，hector_mapping、rviz；
	    说明，mrobot_teleop：该launch文件启动的节点功能，猜测是接收键盘输入，发布的vel_cmd这个topic上；
	    功能说明：使用键盘可以控制机器人在gazebo仿真器上移动；同时rviz界面上，会显示建立出的实时地图；



	2.真实机器人
	    roslaunch mrobot_bringup mrobot_with_laser.launch（树莓派上）
	    roslaunch mrobot_navigation hector_demo.launch（PC上）
	    roslaunch mrobot_teleop mrobot_teleop.launch（PC上）
	    rosrun map_server map_saver -f hector_map
	    说明，mrobot_with_laser文件：启动节点包括，
"mrobot_bringup"、"rplidar.launch"文件中的各节点、"static_transform_publisher"、"robot_pose_ekf"、"joint_state_publisher"、"robot_state_publisher"；可以发布gmapping所需的3个信息，"里程计tf消息、激光雷达的topic数据、激光雷达坐标系到基坐标系的tf消息"；同时订阅键盘输入的vel_cmd这个topic，控制小车运动；
	    说明，hector_demo文件：启动的节点包括，"hector_mapping"，"rviz"；
	    说明，mrobot_teleop文件：接受键盘输入，发布vel_cmd这个topic；
	    功能说明：使用键盘可以控制MRobot机器人移动；同时rviz界面上，会显示建立出的实时地图；
	    小疑问，map_saver节点的参数作用未知，"-f hector_map"









【10】.rgbdslam功能包
	1.杂
	    说明：rgbdslam是属于3dslam，可以使用kinect作为输入的传感器；需要输入的topic包括，"topic_image_mono"（单目rgb图像）、"topic_image_depth"（深度图像）；（小疑问），前面的gmapping、hector、cartographer好像都是使用二维激光雷达，订阅/scan这个topic吗；



	2.安装步骤
	    说明：因为rgbdslam功能包没有集成到ROS的软件源中，所以需要使用编码编译方式安装；源码地址，https://github.com/felixendres/rgbdslam_v2

	    安装依赖包：
	        sudo apt-get install libsuitesparse-dev

	    使用安装脚本：
	        https://raw.githubusercontent.com/felixendres/rgbdslam_v2/kinetic/install.sh
	        chmod +x install.sh
	        bash install.sh
	        说明：因为rgbdslam的安装包配置较为复杂，所以作者提供了一个安装脚本，里面包括了下载源码，cmake，make编译安装，配置安装包等步骤；安装脚本下载地址如上，下载后，使用chmod添加运行权限，bash运行即可；

	    设置环境变量：
	        source ~/Code/rgbdslam_catkin_ws/devel/setup.sh
	        说明：使用上述intall.sh安装脚本安装完成后，会在当前目录中生成Code文件夹，里面包含编译好的rgbdslam功能包，运行前需要设置环境变量；（小疑问，"安装"的意义是什么吗，不是只要编译出功能包，然后设置环境变量，直接就能运行了，而且功能包可以放在任意地方）




	3.测试运行，使用数据集
	    1.数据集下载：下载地址如下，http://vision.in.tum.de/rgbd/dataset/freiburg1/rgbd_dataset_freiburg1_desk.bag
	        说明：rgbdslam需要输入信息包括，"topic_image_mono"（单目rgb图像）、"topic_image_depth"（深度图像）；意思是上述数据集是kinect采集的吗；


	    2.修改rgbdslam.launch
	        说明：需要修改rgbdslam.launch中的图像topic名，使得该参数与数据包发布的一致；

<param name="config/topic_image_mono" value="/camera/rgb/image_color"/>

<param name="config/topic_image_depth" value="/camera/depth/image"/>


	    3.运行使用
	        roslaunch rgbdslam rgbdslam.launch
	        rosbag play rgbd_dataset_freiburg1_desk.bag
	        说明：当rgbdslam节点运行时，会弹出一个可视化界面（小疑问，意思是使用OpenCV之类自行构建的可视化界面，没有用rviz吗）


	    4.保存点云地图
	        rosrun pcl_ros pcd_to_pointcloud quicksave.pcd

	    5.查看点云地图
	        rosrun rviz rviz
	        说明：（不详细），需要把"Fixed Frame"设置为"base_link"；（小疑问，没有说明怎么使用rviz显示点云地图，之前都是订阅topic消息，此处的保存的地图文件）；关于地图文件大小，上述"rgbd_dataset_freiburg1_desk.bag"运行后保存的地图文件就有500M，即三维地图占用空间较大；



	4.运行使用，Kinect相机
	    1.修改rgbdslam.launch
	        说明：需要修改rgbdslam.launch中的图像topic名，使得该参数与Kinect发布的一致；

<param name="config/topic_image_mono" value="/camera/rgb/image_color"/>

<param name="config/topic_image_depth" value="/camera/depth_registered/image_rect_raw"/>

	    2.运行使用
	        roslaunch robot_vision freenect.launch
	        roslaunch rgbdslam.launch
	        说明：因为rgbdslam只使用kinect反馈的数据，没有使用里程计数据，所以没有像cartographer一样使用真实的MRobot小车，或者gazebo仿真，而是直接启动了kinect对应的launch文件即可（freenect.launch）；
	        关于freenect.launch所在功能包：freenect自身功能包，"roslaunch freenect_launch freenect.launch"；在mrobot_bringup功能包中，"roslaunch mrobot_bringup freenect.launch"；上述命令，"roslaunch robot_vision freenect.launch"（小疑问，意思还有一个robot_vision功能包吗，之前好像没有出现过）











【11】.ORB_SLAM功能包
	1.杂
	    说明：ORB_SLAM是由Raul Mur-Artal、J. M. M. Montiel、Juan D. Tardos在2015年发表在IEEE Transactions on Robotics上；项目职业是，http://webdiis.unizar.es/~raulmur/orbslam/；
	    输入输出信息总结（猜测）：好像只使用单目相机topic，"/camera/image_raw"即可；


	2.安装步骤
	    说明：此处安装的是较新版本的ORB_SLAM2；
	    1.安装依赖包
	        sudo apt-get install libboost-all-dev libblas-dev liblapack-dev

	    2.安装eigen
	        说明：这里使用源码编译安装eigen 3.2（小疑问，不清楚是否可以使用apt-get安装eigen 3.2）;
	        下载源码：eigen官网下载eigen 3.2源码，http://eigen.tuxfamily.org/index.php?title=Main_Page
	        mkdir build
	        cd build
	        cmake ..
	        make
	        sudo make install

	    3.安装ORB_SLAM
	        下载源码，git clone https://github.com/raulmur/ORB_SLAM2.git
	        mkdir build
	        cd build
	        cmake ..
	        make
	        sudo make install

	    4.编译安装其他功能包
	        说明：好像意思是，上面下载的源码中，不仅仅包括ORB_SLAM2自身的代码，还有很多功能包，这些功能包需要再次单独编译安装；（小疑问），catkin空间不是一个cmake、make，就能编译安装整个catkin工作空间中所有的功能包吗；
	        export ROS_PACKAGE_PATH=$(ROS_PACKAGE_PATH): ORB_SLAM_PATH/ORB_SLAM2/Examples/ROS
	        chmod +x build_ros.sh
	        ./build_ros.sh
	        说明（不确定）：意思好像是，因为需要安装的功能包数量多，所以作者提供了安装脚本"build_ros.sh"，而通过"export xxx"命令，则该路径下脚本在整个终端窗口可见吗，然后最好把上述"export xxx"命令加入.bashrc文件；

	    5.配置环境变量
	        source ORB_SLAM2/Examples/ROS/ORB_SLAM2/build/devel/setup.bash
	        说明：小疑问，一个，上述source命令只是配置ORB_SLAM相关的其他功能包，没有配置ORB_SLAM自身的setup.bash吗；一个，上述直接使用"ORB_SLAM2"开头的路径，在终端可以直接找到吗；



	3.运行使用，数据集
	    1.单目相机SLAM功能
	        roscore（默认，一般省略笔记）
	        rosrun ORB_SLAM2 Mono Vocabulary/ORBvoc.txt Examples/ORB_SLAM2/Asus.yaml
	        rosbag play rgbd_dataset_freiburg1_desk.bag /camera/rgb/image_color:=/camera/image_raw
	        说明（不详细）：运行Mono节点使用，还需要输入的两个参数分别是，"PATH_TO_VOCABULARY"，算法参数文件，在路径"ORB_SLAM2/Vocabulary"中；"PATH_TO_SETTINGS_FILE"，相机参数设置文件，需要对camera进行标定，或者使用"ORB_SLAM2/Examples/ROS/ORB_SLAM2"路径下的默认设置文件，"Asus.yaml"；
	        说明：ORB_SLAM输入信息好像只用到单目相机topic，且订阅的topic名为"/camera/image_raw"，所以在"rosbag"命令中需要重映射；（说明，rgbd_dataset_freiburg1_desk.bag好像是kinect采集数据，有单目相机topic，深度相机topic，此处只用了单目相机topic）
	        说明，可视化界面：Mono节点好像会生成一个自定义的可视化界面，没有使用rviz软件；


	    2.AR功能
	        roscore（默认，一般省略笔记）
	        rosrun ORB_SLAM2 MonoAR Vocabulary/ORBvoc.txt Examples/ROS/ORB_SLAM2/Asus.yaml
	        rosbag play rgbd_dataset_freiburg1_desk.bag /camera/rgb/image_color:=/camera/image_raw
	        说明，功能：好像是，MonoAR节点会检测当前环境中所有平面，然后在可视化界面上点击"Insert Cube"按钮，会随机在一个平面上放置虚拟的正方体吗；



	4.运行使用，真实相机
	    1.usb_cam_remap.launch文件（部分）
	        说明：（不确定）orb_slam输入信息好像只有单目相机topic；所以需要把相机发布的图像topic映射为ORB_SLAM2订阅的一致；
<remap from="/usb_cam/image_raw" to="/camera/image_raw"/>


	    2.单目相机SLAM功能
	        roslaunch robot_vision usb_cam_remap.launch
	        rosrun ORB_SLAM2 Mono Vocabulary/ORBvoc.txt Examples/ORB_SLAM2/Asus.yaml


	    3.AR功能
	        roslaunch robot_vision usb_cam_remap.launch
	        rosrun ORB_SLAM2 MonoAR Vocabulary/ORBvoc.txt Examples/ROS/ORB_SLAM2/Asus.yaml


















